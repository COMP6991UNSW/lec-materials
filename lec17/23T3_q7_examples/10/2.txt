Fundamentally, a new "profiles" system would be far too difficult
for the same reasons he poses in the article due to, this conversion
or new system needing to either change old code or magically add
this to the current language. For example, he states "“Being careful”
doesn’t scale. So while the core guidelines may suggest safe coding
practices, “We need enforced rules.”", however, this would be
impractical or borderline impossible to do with C++ as it is already
well established and cannot now introduce a new set of enforced rules
that could easily break many of the current written code.
Alternatively, by that reasoning rust would be a superior choice as
rust was built on enforced rules from borrow checkers and lifetimes
that secure and prevent most of the safety errors mentioned.

Although, the cost of interoperating with other languages is an
issue, this is potentially a lot less than creating a new profile
system. This has mostly been addressed in rust with the FFI.
Furthermore, rust fundamentally, addresses the concurrency, type
and safety issues mentioned already and is new enough that
improvements can be constantly made now without widespread chaos.
This is especially as rust has built in low level access that Stroustrup
claims that other new languages outsource to c and C++ thus, preventing
those languages from ever being able to escape the issues of old
systems.

Stroustrup makes the point that global static analysis is unaffordable
and new rules are needed to simplify what is written to be easily,
efficiently, cheaply analysised by local static analysis. This ironically
directly describes how rust implements unsafe where, any potential issues
are kept inside an unsafe bracket which, clearly identifies where,
these issues could be and guarantees that there are no issues elsewhere.
This reflects the ideology that he is aiming for which, further supports
that Rust is a great idea to be adopted.

Further, this new system would require a new investment of time and effort
to produce something which, appears to be the similiar to nature to the
already existent rust with the only advantage being "less
interoperating". This gradual conversion would also be rather slow by
neccessity as changes need to be gradual as mentioned by Stroustrup and
may cause issues as this could be an upheavel in the built systems.

The final slide illustrating his formula of "hygiene rules + static analysis +
run-time checks" is already existent with rust. Hygiene rules are
an essential part of rust's culture ensuring that even unsafe blocks
are always safe for any users to use through, unsafe implementations for
safe abstractions. Static analysis is built in as mentioned previously
with guarantees of safety outside of unsafe blocks that generally remain
small. Run-time checks are built in through borrow checkers which ensures,
that all non-unsafe blocked code is safe from any errors such as, concurrency
and type errors and unsafe checkers such as, Miri.

Therefore, I believe that widespread adoption of Rust is a better
alternative to a new "profiles" system. This does not mean a total
replacement of C++ as C++ is integerated into too many systems for any
such replacement to be wrthwhile but instead of revamping a well established
system it would be more efficient to use Rust.
