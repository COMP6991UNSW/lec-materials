Rust is very strict and often painful, but I disagree entirely that it is not useful.

"the source of troubles is usually in humans, not technology"
    - This is completely ignoring the fact that much of C software
      developed by many intelligent software developers over long periods
      of time still suffer from unsoundness issues regarding memory safety
      issues among other problems.

    - Humans make mistakes. Even the best of developers make mistakes.
      Compilers are much better at catching certain mistakes than humans.
      The strictness of Rust helps catch mistakes that humans otherwise fail to.

"they are just odd toys with a vague future."
    - Perhaps vague at the time, but it is pretty evident that Rust is here to
      stay. Rust is used extensively throughout many projects nowadays ranging
      from web browsers and operating systems to video games and web dev tools.

"there are many compile-time and runtime analysers which will check your code for issues"
    - Even in 2022, much of C++ tooling is still awful because of how flexible the language is.

    - Strictness helps tooling provide better analysis. While Rust does not have the best tooling
      compared to higher level languages (say Java or C#), it is undoubtedly better than
      the tooling seen in other systems programming languages such as C or C++.

    - Furthermore, runtime analysers undoubtedly hurt productivity. Because of the strictness of Rust
      compiler, I can catch certain classes of errors immediately instead of during the CI pipeline.

