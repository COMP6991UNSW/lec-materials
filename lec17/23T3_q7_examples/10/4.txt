I've structured my response as a series of tuples (summarised point, my discussion of point) and
a conclusion at the end

Point: 'There is a HUGE amount of legacy code written in C / C++, and so a safer C++ would make it
easier to interface with and extend upon this code, rather than either interfacing with it from
Rust or rewriting it in Rust, the cost of which could be "ferocious" '.

I think this is one of the better points Bjarne makes, as it is definitely easier to extend C/C++ in C++, than it is using FFI in Rust, or re-writing everything in Rust. However, extending
upon unsafe code, doesn't do that much for safety of programs, in the sense that building upon
unstable grounds, makes the whole building unstable... and therefore, IF profiles did
provide the safety gurantees he says they would, then legacy code would also need to be updated in
order to provide said gurantees. At this point, depending on the delta between this modern C++ and
the legacy code, there could be a significant re-write in order. And at that point, the choice
would be between re-writing it in a modern C++ or re-writing it in Rust, and the "ferocious" cost
of this would really depend on the number of available skilled programmers, and the finesse of your
programming language. C++ is already known to be an extremely verbose and cumbersome language,
with the proposed additions, I dont see it getting any better, and therefore, one could argue, that
unless a significant portion of pre-existing code could be re-used, then the task would be no
simpler than re-writing it in Rust.



Point: He states, there have been 7 different languages suggested to replace C++ and by the time
there is a replacement, there will be 40.

This is somewhat true, but overblown I would say. Of the current viable / popular
programming language which provide safety gurantees, speed AND the low level control / features you
would need to replace C++, there are.... one ? Rust. You have Zig, Nim, Carbon, Swift all of which
compromise on either speed, control or safety. Rust compromises on none of these things (not to say
its trivial to write fast Rust programs, but its been proven possible). Although there are costs
of complexity and certain restrictions in terms of certain programming feats being much harder
to implement in Rust, like self-referential data structures; however, some would say thats because
self-referential data structures are inherantly unsafe.



Point: He talks about safety being more than just type safety, it means: resource leaks, overflows, memory corruption, timing errors, concurrency errors, termination errors, type errors.

I think his point here is true, that safety encompasses all of those things, but it also seems
he is suggesting that exsiting alternatives like Rust do not solve these issues. Rust resolves
resouce leaks with things like automatic deallocation of acquired resources at the end of scopes,
overflows via bounds checking, and panicking rather than continuing execution blindly / unsafely,
memory corruption by way of the borrow checkor, concurrency errors by way of the borrow checker
and overall type system, type errors by way of it's strong, strict, yet expressive type system,
and termination errors... I'm not quite sure what he means by this, but I imagine it's dealing
with the state of your program when things have gone wrong ? if so Rust also resolves this via
it's enums and inbuilt error handling enums, Option, Result and the possible extension of these
mechanisms. The only thing I can't exactly say Rust resolves are timing errors, if this is in
regards to real-time systems and time-sensitive computing, then I don't think C++ provides
any additional tools when compared to Rust, apart from maybe those that exist in 3rd party libs.


In conclusion, I don't believe "profiles" are a compelling alternative to Rust. First of all,
they don't exist yet, and secondly, basically all the issues Bjarne mentions, which "profiles" seek to
resolve, are already resolved in Rust. There aren't 40 or even 7 alternatives, which do this,
at the moment, there is really only one. The only really valid points he has, is that a lot
of people already know C++ and there are more C++ experts than Rust experts, so even if
you had to re-write a lot of existing C++ code using this "profiles" mechanism, the task
would be easier than doing so in Rust. But looking at the trends in popularity, and what
new programmers are interested in, this relationship will seemingly invert in the coming years.

Unfortunately I think Bjarne's ego wont let confront that perhaps a lot of his lifes work is
becoming redundant and the world has found better solutions to most of the problem domains for
which C++ was originally used. So although his opinions should carry weight, since C++ has built
many many great pieces of software, he most likely wont admit defeat and will always propose
alternatives and extensions, its just how people are.
