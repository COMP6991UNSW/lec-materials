'Rust is too strict and too painful to be useful, as explained by this article.'

Rust is certainly a strict language that enforces good programming practices, but I don't agree with the prompt fully. It raises some valid criticisms of Rust, but I don't think the article directly argues Rust is too painful.

The first paragraph argues nobody is going to rewrite old code bases to be in Rust. I agree with this idea and it's certainly a bad idea to blindly rewrite everything in a newish language, when the existing tools have had years of testing. However, Rust's new features are useful for new projects, especially systems programming.

The next few paragraphs argue that other languages can have similar levels of memory safety to Rust from external tooling, and that those tooling is sometimes superior to Rust's safety features. I haven't had too much experience with C++ tooling, but the author raises a good point about flexibility in the next paragraph as well. Languages like C++ allow you to do many unsafe things, and the programmer can choose to use external tools catch some of these issues. However, Rust also has `unsafe` which is obviously a more restrictive way of getting around the language's rules. I like Rust's approach more as it's very explicit which areas are memory unsafe, whereas with C++ code, you often *need* those sanitisers to tell.

Rust's 'painfulness' and verbosity often has a reason behind it. For example, explicit `unwrap`s tells a reader that something fail here, but we're just ignoring the error. Its move semantics make copies explicit with `clone()`, telling the reader this clone might be resource intensive. I think the information being conveyed through the 'painfulness' of types and compiler restrictions is what exactly makes it useful in systems programming. Systems programming often serves as the foundation for user applications, and it's here where correctness is important.

In conclusion, the article raises some valid criticisms of Rust, but much of it seems to be personal preference. It successfully argues the Rust is a strict language, but it isn't convincing about it being not useful because its restrictions. I personally think it's more useful because of the restrictions.

