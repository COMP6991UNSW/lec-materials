The method of profiles does not seem that dissimilar to what Rust actually does and if anything
seems like an implementation of a similar idea:
    1. Rust is also limited in the static analysis it performs and therefore imposes rules on
        how code must be written to allow it to ensure safety, such as explicit lifetimes and
        borrowing.
    2. Rust is also built on the philosophy that 'being careful' is insufficient and cares strongly
        at a design level to ensure that incorrect code does not compile and is not allowed into
        production.
    3. Rust also cares about multiple types of correctness beyond just memory safety, with things like
        concurrency and data races being handled by the borrow checked.

One difference and potential advantage that Rust has over seperate tooling to verify existing code
through profiles is that being a singular language less tooling would need to be built, however,
this does impact the versatility somewhat.

OUT OF TIME
